{"C:\\code\\opensource\\node-tempdb\\tests\\mysql.spec.ts":{"modulePaths":["C:\\code\\opensource\\node-tempdb\\node_modules\\expect-even-more-jest\\dist\\index.d.ts","C:\\code\\opensource\\node-tempdb\\src\\tempdb.ts","C:\\code\\opensource\\node-tempdb\\node_modules\\knex\\types\\index.d.ts","C:\\code\\opensource\\node-tempdb\\src\\connection-info.ts","C:\\code\\opensource\\node-tempdb\\node_modules\\expect-even-more-jest\\dist\\index.d.ts"],"testFileContent":"import \"expect-even-more-jest\";\r\nimport { Databases, TempDb, TempDbOptions } from \"../src/tempdb\";\r\nimport Knex from \"knex\";\r\nimport { KnexConfig } from \"../src/connection-info\";\r\nimport { sleep } from \"expect-even-more-jest\";\r\n\r\ndescribe(`node-tempdb: mysql support`, () => {\r\n    it(`should provide a temp mysql database when available`, async () => {\r\n        // Arrange\r\n        const instance = create();\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        // Assert\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        const result = await conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\");\r\n        expect(result)\r\n            .not.toBeEmptyArray();\r\n    });\r\n\r\n    it(`should time out when no activity and configured to time out`, async () => {\r\n        // Arrange\r\n        const instance = create({\r\n            type: Databases.mysql,\r\n            inactivityTimeoutSeconds: 2\r\n        })\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).resolves.not.toThrow();\r\n        await sleep(3000);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).rejects.toThrow();\r\n        // Assert\r\n    });\r\n\r\n    it(`should time out on absolute timeout when configured to time out`, async () => {\r\n        // Arrange\r\n        const instance = create({\r\n            type: Databases.mysql,\r\n            inactivityTimeoutSeconds: 20,\r\n            absoluteLifespanSeconds: 2\r\n        })\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).resolves.not.toThrow();\r\n        await sleep(3000);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).rejects.toThrow();\r\n        // Assert\r\n    });\r\n\r\n    beforeEach(() => {\r\n        jest.setTimeout(60000);\r\n    });\r\n\r\n    const instances: TempDb[] = [];\r\n\r\n    function create(\r\n        options?: TempDbOptions\r\n    ) {\r\n        const result = new TempDb(options);\r\n        instances.push(result);\r\n        return result;\r\n    }\r\n\r\n    let connections: any[] = [];\r\n\r\n    function knexConnect(config: KnexConfig) {\r\n        const result = Knex(config);\r\n        connections.push(result);\r\n        return result;\r\n    }\r\n\r\n\r\n    afterEach(async () => {\r\n        const toStop = instances.splice(0, instances.length);\r\n        for (let instance of toStop) {\r\n            try {\r\n                await instance.stop();\r\n            } catch (e) {\r\n                if (e.exitCode === 1) {\r\n                    continue;\r\n                }\r\n                console.error(`TempDb Runner process exits with unexpected code: ${e.exitCode}`, e);\r\n            }\r\n        }\r\n        const conns = connections.splice(0, connections.length);\r\n        for (let conn of conns) {\r\n            await conn.destroy();\r\n        }\r\n    });\r\n});\r\n"}}