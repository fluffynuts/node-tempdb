{"version":3,"file":"C:\\code\\opensource\\node-tempdb\\src\\connection-info.ts","sources":["C:\\code\\opensource\\node-tempdb\\src\\connection-info.ts"],"names":[],"mappings":"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","sourcesContent":["import { Databases } from \"./tempdb\";\r\n\r\nexport type DbConfig = DbConnectionConfig | SqliteConnectionConfig;\r\n\r\nexport interface Dictionary<T> {\r\n    [key: string]: T;\r\n}\r\n\r\nexport interface SqliteConnectionConfig {\r\n    filename: string;\r\n}\r\n\r\nexport interface DbConnectionConfig {\r\n    host: string;\r\n    user: string;\r\n    password: string;\r\n    database: string;\r\n    port: number;\r\n}\r\n\r\nexport interface KnexConfig {\r\n    client: string;\r\n    connection: SqliteConnectionConfig | DbConnectionConfig;\r\n    useNullAsDefault: boolean;\r\n}\r\n\r\nexport class ConnectionInfo {\r\n    public get options(): Dictionary<string> {\r\n        return { ...this._options };\r\n    }\r\n\r\n    private _options: Dictionary<string> = {};\r\n\r\n    public get knexConfig(): KnexConfig {\r\n        return {\r\n            client: this.makeKnexClientString(),\r\n            connection: this.config,\r\n            useNullAsDefault: true\r\n        }\r\n    }\r\n\r\n    public get config(): DbConnectionConfig | SqliteConnectionConfig {\r\n        return this.makeConnectionInfo();\r\n    }\r\n\r\n    constructor(private _connectionString: string, private _type: Databases) {\r\n        const\r\n            config = (_connectionString || \"\").split(\";\")\r\n                .reduce((acc, cur) => {\r\n                    const parts = cur.split(\"=\");\r\n                    acc[parts[0]] = parts.slice(1).join(\"=\");\r\n                    return acc;\r\n                }, {} as Dictionary<string>),\r\n            keys = Object.keys(config);\r\n        keys.forEach(k => {\r\n            const\r\n                lower = k.toLowerCase(),\r\n                value = config[k],\r\n                mapped = ConnectionInfo.optionMap[lower] || lower;\r\n            if (!this.mapToInstance(mapped, value)) {\r\n                this._options[k] = value;\r\n            }\r\n        })\r\n    }\r\n\r\n    public clone(): ConnectionInfo {\r\n        return new ConnectionInfo(this._connectionString, this._type);\r\n    }\r\n\r\n    private _user = \"\";\r\n    private _pass = \"\";\r\n    private _host = \"\";\r\n    private _database = \"\";\r\n    private _port = 0;\r\n\r\n    private makeConnectionInfo(): SqliteConnectionConfig | DbConnectionConfig {\r\n        if (this._type === Databases.sqlite) {\r\n            return {\r\n                filename: this.sanitizePath(this._database)\r\n            }\r\n        } else {\r\n            return {\r\n                database: this._database,\r\n                host: this._host,\r\n                password: this._pass,\r\n                user: this._user,\r\n                port: this._port\r\n            }\r\n        }\r\n    }\r\n\r\n    private sanitizePath(str: string): string {\r\n        if (str.startsWith(`\"`)) {\r\n            str = str.substr(1);\r\n        }\r\n        if (str.endsWith(`\"`)) {\r\n            str = str.substr(0, str.length - 1);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    private makeKnexClientString(): string {\r\n        return this._type === Databases.sqlite\r\n            ? \"sqlite3\"\r\n            : this._type;\r\n    }\r\n\r\n    private mapToInstance(key: string, value: string) {\r\n        switch (key) {\r\n            case \"user\":\r\n                this._user = value;\r\n                return true;\r\n            case \"password\":\r\n            case \"pass\":\r\n                this._pass = value;\r\n                return true;\r\n            case \"host\":\r\n                this._host = value;\r\n                return true;\r\n            case \"database\":\r\n            case \"datasource\":\r\n                this._database = value;\r\n                return true;\r\n            case \"port\":\r\n                const parsed = parseInt(value, 10);\r\n                if (isNaN(parsed)) {\r\n                    throw new Error(`Invalid value for port: ${ value }`);\r\n                }\r\n                this._port = parsed;\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static readonly optionMap: Dictionary<string> = {\r\n        \"user id\": \"user\",\r\n        \"server\": \"host\",\r\n        \"initial catalog\": \"database\"\r\n    };\r\n}\r\n\r\n"]}