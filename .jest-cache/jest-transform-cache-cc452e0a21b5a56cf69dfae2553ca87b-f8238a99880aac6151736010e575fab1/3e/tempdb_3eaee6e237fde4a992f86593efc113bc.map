{"version":3,"file":"C:\\code\\opensource\\node-tempdb\\src\\tempdb.ts","sources":["C:\\code\\opensource\\node-tempdb\\src\\tempdb.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcessWithoutNullStreams, spawn } from \"child_process\";\r\nimport path from \"path\";\r\nimport { fs } from \"./fs\";\r\nimport { which } from \"./which\";\r\nimport { ConnectionInfo, DbConfig, KnexConfig } from \"./connection-info\";\r\n\r\nconst myPackage = \"node-tempdb\";\r\nconst pbPackage = \"PeanutButter.TempDb.Runner\";\r\n\r\nexport enum Databases {\r\n    mysql = \"mysql\",\r\n    sqlite = \"sqlite\",\r\n    localdb = \"localdb\"\r\n}\r\n\r\ntype Action = ((...args: any[]) => void);\r\n\r\nexport interface TempDbOptions {\r\n    type?: Databases,\r\n    inactivityTimeoutSeconds?: number;\r\n    absoluteLifespanSeconds?: number;\r\n}\r\n\r\nexport class TempDb {\r\n    private _lastError: any;\r\n\r\n    public static async create(options?: TempDbOptions): Promise<TempDb> {\r\n        const result = new TempDb(options);\r\n        await result.start();\r\n        return result;\r\n    }\r\n\r\n    public get type(): Databases {\r\n        return this._type;\r\n    }\r\n\r\n    private readonly _type: Databases;\r\n    private readonly _inactivityTimeoutSeconds?: number;\r\n    private readonly _absoluteLifespanSeconds?: number;\r\n\r\n    constructor(options?: TempDbOptions) {\r\n        this._type = options?.type ?? Databases.mysql;\r\n        this._inactivityTimeoutSeconds = options?.inactivityTimeoutSeconds;\r\n        this._absoluteLifespanSeconds = options?.absoluteLifespanSeconds;\r\n    }\r\n\r\n    public get config(): DbConfig | undefined {\r\n        return this._connectionInfo\r\n            ? this._connectionInfo.clone().config\r\n            : undefined;\r\n    }\r\n\r\n    public get knexConfig(): KnexConfig | undefined {\r\n        return this._connectionInfo\r\n            ? this._connectionInfo.clone().knexConfig\r\n            : undefined;\r\n    }\r\n\r\n    private get connectionInfo(): ConnectionInfo | undefined {\r\n        return !this._connectionInfo\r\n            ? undefined\r\n            : this._connectionInfo.clone();\r\n    }\r\n\r\n    public get isRunning(): boolean {\r\n        return !!this._process;\r\n    }\r\n\r\n    private _connectionInfo: ConnectionInfo | undefined;\r\n    private _process: ChildProcessWithoutNullStreams | undefined;\r\n\r\n    private _generateTempDbRunnerArgs(): string[] {\r\n        const result = [\"-e\", this._type];\r\n        if (this._absoluteLifespanSeconds !== undefined) {\r\n            result.push(\"-a\");\r\n            result.push(this._absoluteLifespanSeconds.toString());\r\n        }\r\n        if (this._inactivityTimeoutSeconds !== undefined) {\r\n            result.push(\"-i\");\r\n            result.push(this._inactivityTimeoutSeconds.toString());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Starts the instance, returning the connection string once started\r\n     */\r\n    public async start(): Promise<ConnectionInfo> {\r\n        if (this._process) {\r\n            throw new Error(\r\n                \"Already started! Stop me first! If you want connection info, observe the connectionInfo property\"\r\n            );\r\n        }\r\n        const\r\n            runner = await this.findRunner(),\r\n            args = this._generateTempDbRunnerArgs(),\r\n            process = this._process = spawn(runner, args);\r\n        return new Promise<ConnectionInfo>((resolve, reject) => {\r\n            let resolved = false;\r\n            const stderr: string[] = [];\r\n            process.stdin.setDefaultEncoding(\"utf8\");\r\n            process.stdout.on(\"data\", d => {\r\n                const line = d.toString().replace(/\\n$/, \"\").replace(/\\r$/, \"\");\r\n                if (line.toLowerCase().startsWith(\"connection string:\")) {\r\n                    const connectionstring = line.split(\":\").slice(1).join(\":\").trim();\r\n                    this._connectionInfo = new ConnectionInfo(connectionstring, this._type);\r\n                    if (!resolved) {\r\n                        resolve(this._connectionInfo);\r\n                        resolved = true;\r\n                    }\r\n                }\r\n            });\r\n            process.stderr.on(\"data\", d => {\r\n                stderr.push(d.toString());\r\n            });\r\n            process.on(\"close\", code => {\r\n                if (code && !resolved) {\r\n                    reject(`Unable to start up ${ runner }:\\n${ stderr.join(\"\\n\") }`);\r\n                }\r\n                if (code) {\r\n                    const error = new Error(`TempDbRunner process stops with code: ${ code }`) as any;\r\n                    error.exitCode = code;\r\n                    this._lastError = error;\r\n                    if (this._stopReject) {\r\n                        this._stopReject(error);\r\n                    }\r\n                } else if (this._stopResolve) {\r\n                    this._stopResolve();\r\n                }\r\n                try {\r\n                    this._process?.kill();\r\n                } catch (e) {\r\n                }\r\n                this._process = undefined;\r\n                this._stopResolve = undefined;\r\n                this._stopReject = undefined;\r\n            });\r\n        });\r\n    }\r\n\r\n    private _stopResolve: Action | undefined;\r\n    private _stopReject: Action | undefined;\r\n\r\n    public async stop(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._process === undefined) {\r\n                return this._lastError\r\n                    ? reject(this._lastError)\r\n                    : reject(new Error(`Not running`));\r\n            }\r\n            if (this._stopResolve) {\r\n                return reject(`Busy trying to stop...`);\r\n            }\r\n            this._stopResolve = resolve;\r\n            this._stopReject = reject;\r\n            this._process.stdin.write(\"stop\\n\");\r\n        });\r\n    }\r\n\r\n    private findRunner(): Promise<string> {\r\n        // find the package folder\r\n        if (process.platform === \"win32\") {\r\n            return this.findRunnerForWindows();\r\n        } else {\r\n            return this.findRunnerForNix();\r\n        }\r\n    }\r\n\r\n    private async findRunnerForWindows(): Promise<string> {\r\n        // look for lib/net4* on windows\r\n        const\r\n            tempDbBase = await this.findFrameworkPackageFolder(),\r\n            tempDbContents = await fs.readdir(tempDbBase),\r\n            search = `${ pbPackage }.exe`,\r\n            lsearch = search.toLowerCase(),\r\n            launcher = tempDbContents.find(p => p.toLowerCase() === lsearch);\r\n        if (!launcher) {\r\n            throw new Error(`Could not find launcher ${ search } in ${ tempDbBase }`);\r\n        }\r\n        return path.join(tempDbBase, launcher);\r\n    }\r\n\r\n    private async findNetCorePackageFolder(): Promise<string> {\r\n        const winner = await this.findPackageLibFolder(\r\n            f => path.basename(f).startsWith(\"netcore\")\r\n        );\r\n        if (!winner) {\r\n            throw new Error(`Can't find netcore libdir under ${ await this.findPackageFolder() }`);\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    private async findFrameworkPackageFolder(): Promise<string> {\r\n        const winner = await this.findPackageLibFolder(\r\n            f => path.basename(f).startsWith(\"net4\")\r\n        );\r\n        if (!winner) {\r\n            throw new Error(`Can't find ${ pbPackage } net4x libdir`);\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    private async findPackageLibFolder(matching: ((fullpath: string) => boolean)): Promise<string | undefined> {\r\n        const\r\n            packageFolder = await this.findTempDbPackageFolder(),\r\n            libDir = path.join(packageFolder, \"lib\"),\r\n            contents = await fs.readdir(libDir),\r\n            contentsFullPaths = contents.map(f => path.join(libDir, f))\r\n        return contentsFullPaths.find(matching);\r\n    }\r\n\r\n    private async findTempDbPackageFolder(): Promise<string> {\r\n        const\r\n            packageFolder = await this.findPackageFolder(),\r\n            immediateContents = await fs.readdir(packageFolder),\r\n            searchPackageFolder = pbPackage.toLowerCase(),\r\n            tempDbPackageFolder = immediateContents.find(\r\n                p => p.toLowerCase().startsWith(searchPackageFolder)\r\n            );\r\n        if (tempDbPackageFolder) {\r\n            return path.join(packageFolder, tempDbPackageFolder);\r\n        }\r\n        throw new Error(`Could not find ${ pbPackage } package folder under \"${ packageFolder }\"`);\r\n    }\r\n\r\n    private async findRunnerForNix(): Promise<string> {\r\n        const dotnet = await which(\"dotnet\");\r\n        if (dotnet) {\r\n            return this.findDotNetRunnerForNix();\r\n        }\r\n        const mono = await which(\"mono\");\r\n        if (mono) {\r\n            return this.findMonoRunnerForNix();\r\n        }\r\n        throw new Error(`node-tempdb levers off of ${ pbPackage } You either need 'dotnet' or 'mono' to spin it up.`);\r\n    }\r\n\r\n    private async findDotNetRunnerForNix(): Promise<string> {\r\n        return this.findShellScriptLauncher(\r\n            await this.findNetCorePackageFolder()\r\n        )\r\n    }\r\n\r\n    private async findMonoRunnerForNix(): Promise<string> {\r\n        return this.findShellScriptLauncher(\r\n            await this.findFrameworkPackageFolder()\r\n        );\r\n    }\r\n\r\n    private async findShellScriptLauncher(folder: string): Promise<string> {\r\n        const\r\n            contents = await fs.readdir(folder),\r\n            scriptname = \"start-tempdb.sh\",\r\n            shellscript = contents.find(s => s.toLowerCase() === scriptname);\r\n        if (!shellscript) {\r\n            throw new Error(`Can't find launcher stub ${ scriptname } in ${ folder }`);\r\n        }\r\n        const result = path.join(folder, shellscript);\r\n        // ensure it's a unix file!\r\n        const scriptContents = await fs.readTextFile(result);\r\n        const unixified = scriptContents.split(/[\\r|\\n]/)\r\n            .filter(l => l.trim() !== \"\")\r\n            .join(\"\\n\");\r\n        await fs.writeFile(result, unixified);\r\n        // ensure it's executable!\r\n        await fs.chmod(result, \"755\");\r\n        return result;\r\n    }\r\n\r\n    private async findPackageFolder(): Promise<string> {\r\n        let\r\n            current = __dirname,\r\n            last = current;\r\n        do {\r\n            last = current;\r\n            const test = path.join(current, \"package.json\");\r\n            if (await fs.fileExists(test)) {\r\n                try {\r\n                    const\r\n                        contents = await fs.readTextFile(test),\r\n                        pkg = JSON.parse(contents),\r\n                        isMine = pkg.name === myPackage;\r\n                    if (isMine) {\r\n                        return current;\r\n                    }\r\n                } catch (e) {\r\n                    // suppress: if we can't read & parse it, it might as well not exist\r\n                }\r\n            }\r\n            current = path.dirname(current);\r\n        }\r\n        while (last !== current);\r\n        throw new Error(`Can't find package base dir for \"${ myPackage }\"`);\r\n    }\r\n}\r\n"]}