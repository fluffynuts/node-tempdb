1009434a8ec795926b682decccf15a11
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("expect-even-more-jest");
const tempdb_1 = require("../src/tempdb");
const knex_1 = __importDefault(require("knex"));
const expect_even_more_jest_1 = require("expect-even-more-jest");
describe(`node-tempdb: mysql support`, () => {
    it(`should provide a temp mysql database when available`, async () => {
        // Arrange
        const instance = create();
        // Act
        const connectionInfo = await instance.start();
        // Assert
        const conn = knexConnect(connectionInfo.knexConfig);
        const result = await conn.select("TABLE_NAME")
            .from("INFORMATION_SCHEMA.TABLES");
        expect(result)
            .not.toBeEmptyArray();
    });
    it(`should time out when no activity and configured to time out`, async () => {
        // Arrange
        const instance = create({
            type: tempdb_1.Databases.mysql,
            inactivityTimeoutSeconds: 2
        });
        // Act
        const connectionInfo = await instance.start();
        const conn = knexConnect(connectionInfo.knexConfig);
        await expect(conn.select("TABLE_NAME")
            .from("INFORMATION_SCHEMA.TABLES")).resolves.not.toThrow();
        await expect_even_more_jest_1.sleep(3000);
        await expect(conn.select("TABLE_NAME")
            .from("INFORMATION_SCHEMA.TABLES")).rejects.toThrow();
        // Assert
    });
    it(`should time out on absolute timeout when configured to time out`, async () => {
        // Arrange
        const instance = create({
            type: tempdb_1.Databases.mysql,
            inactivityTimeoutSeconds: 20,
            absoluteLifespanSeconds: 2
        });
        // Act
        const connectionInfo = await instance.start();
        const conn = knexConnect(connectionInfo.knexConfig);
        await expect(conn.select("TABLE_NAME")
            .from("INFORMATION_SCHEMA.TABLES")).resolves.not.toThrow();
        await expect_even_more_jest_1.sleep(3000);
        await expect(conn.select("TABLE_NAME")
            .from("INFORMATION_SCHEMA.TABLES")).rejects.toThrow();
        // Assert
    });
    beforeEach(() => {
        jest.setTimeout(60000);
    });
    const instances = [];
    function create(options) {
        const result = new tempdb_1.TempDb(options);
        instances.push(result);
        return result;
    }
    let connections = [];
    function knexConnect(config) {
        const result = knex_1.default(config);
        connections.push(result);
        return result;
    }
    afterEach(async () => {
        const toStop = instances.splice(0, instances.length);
        for (let instance of toStop) {
            try {
                await instance.stop();
            }
            catch (e) {
                if (e.exitCode === 1) {
                    continue;
                }
                console.error(`TempDb Runner process exits with unexpected code: ${e.exitCode}`, e);
            }
        }
        const conns = connections.splice(0, connections.length);
        for (let conn of conns) {
            await conn.destroy();
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,