c2e9492d52cde400ce96633306092937
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("expect-even-more-jest");
const tempdb_1 = require("../src/tempdb");
const knex_1 = __importDefault(require("knex"));
describe(`node-tempdb: sqlite support`, () => {
    it(`should provide a temp sqlite database on request`, async () => {
        // Arrange
        const instance = create(tempdb_1.Databases.sqlite);
        // Act
        const connectionInfo = await instance.start();
        // Assert
        const conn = knexConnect(connectionInfo.knexConfig);
        const result = await conn.select("name")
            .from("sqlite_master")
            .where("type", "=", "table");
        expect(result)
            .toBeEmptyArray();
    });
    it(`should stop`, async () => {
        // Arrange
        const instance = create(tempdb_1.Databases.sqlite);
        // Act
        const connectionInfo = await instance.start();
        await instance.stop();
        // Assert
        const connection = connectionInfo.config;
        expect(connection.filename)
            .not.toBeFile();
    });
    it(`should have a static create method which starts up the database`, async () => {
        // Arrange
        const instance = await staticCreate(tempdb_1.Databases.sqlite);
        const config = instance.knexConfig;
        if (!config) {
            throw new Error("Started TempDb instance should have config");
        }
        // Act
        // Assert
        const conn = knexConnect(config);
        const result = await conn.select("name")
            .from("sqlite_master")
            .where("type", "=", "table");
        expect(result)
            .toBeEmptyArray();
    });
    const instances = [];
    function create(type) {
        const result = new tempdb_1.TempDb({ type });
        instances.push(result);
        return result;
    }
    async function staticCreate(type) {
        const result = await tempdb_1.TempDb.create({ type });
        instances.push(result);
        return result;
    }
    let connections = [];
    function knexConnect(config) {
        const result = knex_1.default(config);
        connections.push(result);
        return result;
    }
    beforeEach(() => {
        jest.setTimeout(30000);
    });
    afterEach(async () => {
        const toStop = instances.splice(0, instances.length);
        for (let instance of toStop) {
            if (instance.isRunning) {
                await instance.stop();
            }
        }
        const conns = connections.splice(0, connections.length);
        for (let conn of conns) {
            await conn.destroy();
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXGNvZGVcXG9wZW5zb3VyY2VcXG5vZGUtdGVtcGRiXFx0ZXN0c1xcc3FsaXRlLnNwZWMudHMiLCJzb3VyY2VzIjpbIkM6XFxjb2RlXFxvcGVuc291cmNlXFxub2RlLXRlbXBkYlxcdGVzdHNcXHNxbGl0ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaUNBQStCO0FBQy9CLDBDQUFrRDtBQUNsRCxnREFBd0I7QUFHeEIsUUFBUSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUN6QyxFQUFFLENBQUMsa0RBQWtELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUQsVUFBVTtRQUNWLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxrQkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE1BQU07UUFDTixNQUFNLGNBQWMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QyxTQUFTO1FBQ1QsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ25DLElBQUksQ0FBQyxlQUFlLENBQUM7YUFDckIsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUNULGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGFBQWEsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6QixVQUFVO1FBQ1YsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGtCQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUMsTUFBTTtRQUNOLE1BQU0sY0FBYyxHQUFHLE1BQU0sUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlDLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLFNBQVM7UUFDVCxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsTUFBZ0MsQ0FBQztRQUNuRSxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQzthQUN0QixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUVBQWlFLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0UsVUFBVTtRQUNWLE1BQU0sUUFBUSxHQUFHLE1BQU0sWUFBWSxDQUFDLGtCQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsTUFBTTtRQUNOLFNBQVM7UUFDVCxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUNuQyxJQUFJLENBQUMsZUFBZSxDQUFDO2FBQ3JCLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDVCxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sU0FBUyxHQUFhLEVBQUUsQ0FBQztJQUUvQixTQUFTLE1BQU0sQ0FBQyxJQUFnQjtRQUM1QixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDcEMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxJQUFnQjtRQUN4QyxNQUFNLE1BQU0sR0FBRyxNQUFNLGVBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQUksV0FBVyxHQUFVLEVBQUUsQ0FBQztJQUM1QixTQUFTLFdBQVcsQ0FBQyxNQUFrQjtRQUNuQyxNQUFNLE1BQU0sR0FBRyxjQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUIsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFHSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDakIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELEtBQUssSUFBSSxRQUFRLElBQUksTUFBTSxFQUFFO1lBQ3pCLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDekI7U0FDSjtRQUNELE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4RCxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRTtZQUNwQixNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJleHBlY3QtZXZlbi1tb3JlLWplc3RcIjtcclxuaW1wb3J0IHsgRGF0YWJhc2VzLCBUZW1wRGIgfSBmcm9tIFwiLi4vc3JjL3RlbXBkYlwiO1xyXG5pbXBvcnQgS25leCBmcm9tIFwia25leFwiO1xyXG5pbXBvcnQgeyBLbmV4Q29uZmlnLCBTcWxpdGVDb25uZWN0aW9uQ29uZmlnIH0gZnJvbSBcIi4uL3NyYy9jb25uZWN0aW9uLWluZm9cIjtcclxuXHJcbmRlc2NyaWJlKGBub2RlLXRlbXBkYjogc3FsaXRlIHN1cHBvcnRgLCAoKSA9PiB7XHJcbiAgICBpdChgc2hvdWxkIHByb3ZpZGUgYSB0ZW1wIHNxbGl0ZSBkYXRhYmFzZSBvbiByZXF1ZXN0YCwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIC8vIEFycmFuZ2VcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZShEYXRhYmFzZXMuc3FsaXRlKTtcclxuICAgICAgICAvLyBBY3RcclxuICAgICAgICBjb25zdCBjb25uZWN0aW9uSW5mbyA9IGF3YWl0IGluc3RhbmNlLnN0YXJ0KCk7XHJcbiAgICAgICAgLy8gQXNzZXJ0XHJcbiAgICAgICAgY29uc3QgY29ubiA9IGtuZXhDb25uZWN0KGNvbm5lY3Rpb25JbmZvLmtuZXhDb25maWcpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm4uc2VsZWN0KFwibmFtZVwiKVxyXG4gICAgICAgICAgICAuZnJvbShcInNxbGl0ZV9tYXN0ZXJcIilcclxuICAgICAgICAgICAgLndoZXJlKFwidHlwZVwiLCBcIj1cIiwgXCJ0YWJsZVwiKTtcclxuICAgICAgICBleHBlY3QocmVzdWx0KVxyXG4gICAgICAgICAgICAudG9CZUVtcHR5QXJyYXkoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KGBzaG91bGQgc3RvcGAsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAvLyBBcnJhbmdlXHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBjcmVhdGUoRGF0YWJhc2VzLnNxbGl0ZSk7XHJcbiAgICAgICAgLy8gQWN0XHJcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbkluZm8gPSBhd2FpdCBpbnN0YW5jZS5zdGFydCgpO1xyXG4gICAgICAgIGF3YWl0IGluc3RhbmNlLnN0b3AoKTtcclxuICAgICAgICAvLyBBc3NlcnRcclxuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gY29ubmVjdGlvbkluZm8uY29uZmlnIGFzIFNxbGl0ZUNvbm5lY3Rpb25Db25maWc7XHJcbiAgICAgICAgZXhwZWN0KGNvbm5lY3Rpb24uZmlsZW5hbWUpXHJcbiAgICAgICAgICAgIC5ub3QudG9CZUZpbGUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KGBzaG91bGQgaGF2ZSBhIHN0YXRpYyBjcmVhdGUgbWV0aG9kIHdoaWNoIHN0YXJ0cyB1cCB0aGUgZGF0YWJhc2VgLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgLy8gQXJyYW5nZVxyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gYXdhaXQgc3RhdGljQ3JlYXRlKERhdGFiYXNlcy5zcWxpdGUpO1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGluc3RhbmNlLmtuZXhDb25maWc7XHJcbiAgICAgICAgaWYgKCFjb25maWcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RhcnRlZCBUZW1wRGIgaW5zdGFuY2Ugc2hvdWxkIGhhdmUgY29uZmlnXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBY3RcclxuICAgICAgICAvLyBBc3NlcnRcclxuICAgICAgICBjb25zdCBjb25uID0ga25leENvbm5lY3QoY29uZmlnKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb25uLnNlbGVjdChcIm5hbWVcIilcclxuICAgICAgICAgICAgLmZyb20oXCJzcWxpdGVfbWFzdGVyXCIpXHJcbiAgICAgICAgICAgIC53aGVyZShcInR5cGVcIiwgXCI9XCIsIFwidGFibGVcIik7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdClcclxuICAgICAgICAgICAgLnRvQmVFbXB0eUFycmF5KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBpbnN0YW5jZXM6IFRlbXBEYltdID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlKHR5cGU/OiBEYXRhYmFzZXMpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVGVtcERiKHsgdHlwZSB9KTtcclxuICAgICAgICBpbnN0YW5jZXMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gc3RhdGljQ3JlYXRlKHR5cGU/OiBEYXRhYmFzZXMpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBUZW1wRGIuY3JlYXRlKHsgdHlwZSB9KTtcclxuICAgICAgICBpbnN0YW5jZXMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNvbm5lY3Rpb25zOiBhbnlbXSA9IFtdO1xyXG4gICAgZnVuY3Rpb24ga25leENvbm5lY3QoY29uZmlnOiBLbmV4Q29uZmlnKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gS25leChjb25maWcpO1xyXG4gICAgICAgIGNvbm5lY3Rpb25zLnB1c2gocmVzdWx0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIGplc3Quc2V0VGltZW91dCgzMDAwMCk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB0b1N0b3AgPSBpbnN0YW5jZXMuc3BsaWNlKDAsIGluc3RhbmNlcy5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGluc3RhbmNlIG9mIHRvU3RvcCkge1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBpbnN0YW5jZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29ubnMgPSBjb25uZWN0aW9ucy5zcGxpY2UoMCwgY29ubmVjdGlvbnMubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBjb25uIG9mIGNvbm5zKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGNvbm4uZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuIl19