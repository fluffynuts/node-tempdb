{"version":3,"file":"C:\\code\\opensource\\node-tempdb\\src\\fs.ts","sources":["C:\\code\\opensource\\node-tempdb\\src\\fs.ts"],"names":[],"mappings":";;;;;;AAAA,2BAAgD;AAChD,gDAAwB;AAExB,MAAM,eAAe,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AAE7C,KAAK,UAAU,QAAQ,CAAC,EAAU,EAAE,EAAmC;IACnE,IAAI;QACA,MAAM,EAAE,GAAG,MAAM,aAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;AAED,SAAS,UAAU,CAAC,EAAU;IAC1B,OAAO,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,YAAY,CAAC,EAAU;IAC5B,OAAO,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;AAChD,CAAC;AAED,KAAK,UAAU,YAAY,CAAC,EAAU;IAClC,OAAO,CAAC,MAAM,aAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,eAAe,CAAC,CAAW,CAAC;AAC/D,CAAC;AAED,KAAK,UAAU,aAAa,CAAC,EAAU,EAAE,QAAgB;IACrD,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAChC,IAAI,CAAC,CAAC,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE;QAC/B,MAAM,aAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;KAC1B;IACD,MAAM,aAAG,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;AACvD,CAAC;AAEY,QAAA,EAAE,GAAG;IACd,GAAG,aAAG;IACN,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,aAAa;CAChB,CAAC","sourcesContent":["import { promises as _fs, StatsBase } from \"fs\";\r\nimport path from \"path\";\r\n\r\nconst textFileOptions = { encoding: \"utf8\" };\r\n\r\nasync function testPath(at: string, fn: (st: StatsBase<any>) => boolean): Promise<boolean> {\r\n    try {\r\n        const st = await _fs.stat(at);\r\n        return fn(st);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction fileExists(at: string): Promise<boolean> {\r\n    return testPath(at, st => st.isFile());\r\n}\r\n\r\nfunction folderExists(at: string): Promise<boolean> {\r\n    return testPath(at, st => st.isDirectory());\r\n}\r\n\r\nasync function readTextFile(at: string): Promise<string> {\r\n    return (await _fs.readFile(at, textFileOptions)) as string;\r\n}\r\n\r\nasync function writeTextFile(at: string, contents: string): Promise<void> {\r\n    const folder = path.dirname(at);\r\n    if (!(await folderExists(folder))) {\r\n        await _fs.mkdir(folder)\r\n    }\r\n    await _fs.writeFile(at, contents, textFileOptions);\r\n}\r\n\r\nexport const fs = {\r\n    ..._fs,\r\n    fileExists,\r\n    folderExists,\r\n    readTextFile,\r\n    writeTextFile\r\n};\r\n"]}