{"version":3,"file":"C:\\code\\opensource\\node-tempdb\\tests\\mysql.spec.ts","sources":["C:\\code\\opensource\\node-tempdb\\tests\\mysql.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import \"expect-even-more-jest\";\r\nimport { Databases, TempDb, TempDbOptions } from \"../src/tempdb\";\r\nimport Knex from \"knex\";\r\nimport { KnexConfig } from \"../src/connection-info\";\r\nimport { sleep } from \"expect-even-more-jest\";\r\n\r\ndescribe(`node-tempdb: mysql support`, () => {\r\n    it(`should provide a temp mysql database when available`, async () => {\r\n        // Arrange\r\n        const instance = create();\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        // Assert\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        const result = await conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\");\r\n        expect(result)\r\n            .not.toBeEmptyArray();\r\n    });\r\n\r\n    it(`should time out when no activity and configured to time out`, async () => {\r\n        // Arrange\r\n        const instance = create({\r\n            type: Databases.mysql,\r\n            inactivityTimeoutSeconds: 2\r\n        })\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).resolves.not.toThrow();\r\n        await sleep(3000);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).rejects.toThrow();\r\n        // Assert\r\n    });\r\n\r\n    it(`should time out on absolute timeout when configured to time out`, async () => {\r\n        // Arrange\r\n        const instance = create({\r\n            type: Databases.mysql,\r\n            inactivityTimeoutSeconds: 20,\r\n            absoluteLifespanSeconds: 2\r\n        })\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).resolves.not.toThrow();\r\n        await sleep(3000);\r\n        await expect(conn.select(\"TABLE_NAME\")\r\n            .from(\"INFORMATION_SCHEMA.TABLES\")\r\n        ).rejects.toThrow();\r\n        // Assert\r\n    });\r\n\r\n    beforeEach(() => {\r\n        jest.setTimeout(60000);\r\n    });\r\n\r\n    const instances: TempDb[] = [];\r\n\r\n    function create(\r\n        options?: TempDbOptions\r\n    ) {\r\n        const result = new TempDb(options);\r\n        instances.push(result);\r\n        return result;\r\n    }\r\n\r\n    let connections: any[] = [];\r\n\r\n    function knexConnect(config: KnexConfig) {\r\n        const result = Knex(config);\r\n        connections.push(result);\r\n        return result;\r\n    }\r\n\r\n\r\n    afterEach(async () => {\r\n        const toStop = instances.splice(0, instances.length);\r\n        for (let instance of toStop) {\r\n            try {\r\n                await instance.stop();\r\n            } catch (e) {\r\n                if (e.exitCode === 1) {\r\n                    continue;\r\n                }\r\n                console.error(`TempDb Runner process exits with unexpected code: ${e.exitCode}`, e);\r\n            }\r\n        }\r\n        const conns = connections.splice(0, connections.length);\r\n        for (let conn of conns) {\r\n            await conn.destroy();\r\n        }\r\n    });\r\n});\r\n"]}