e1f09d230d6c4aae56c8ba2b0a6d5d4d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TempDb = exports.Databases = void 0;
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const fs_1 = require("./fs");
const which_1 = require("./which");
const connection_info_1 = require("./connection-info");
const myPackage = "node-tempdb";
const pbPackage = "PeanutButter.TempDb.Runner";
var Databases;
(function (Databases) {
    Databases["mysql"] = "mysql";
    Databases["sqlite"] = "sqlite";
    Databases["localdb"] = "localdb";
})(Databases = exports.Databases || (exports.Databases = {}));
class TempDb {
    constructor(options) {
        var _a;
        this._type = (_a = options === null || options === void 0 ? void 0 : options.type) !== null && _a !== void 0 ? _a : Databases.mysql;
        this._inactivityTimeoutSeconds = options === null || options === void 0 ? void 0 : options.inactivityTimeoutSeconds;
        this._absoluteLifespanSeconds = options === null || options === void 0 ? void 0 : options.absoluteLifespanSeconds;
    }
    static async create(options) {
        const result = new TempDb(options);
        await result.start();
        return result;
    }
    get type() {
        return this._type;
    }
    get config() {
        return this._connectionInfo
            ? this._connectionInfo.clone().config
            : undefined;
    }
    get knexConfig() {
        return this._connectionInfo
            ? this._connectionInfo.clone().knexConfig
            : undefined;
    }
    get connectionInfo() {
        return !this._connectionInfo
            ? undefined
            : this._connectionInfo.clone();
    }
    get isRunning() {
        return !!this._process;
    }
    _generateTempDbRunnerArgs() {
        const result = ["-e", this._type];
        if (this._absoluteLifespanSeconds !== undefined) {
            result.push("-a");
            result.push(this._absoluteLifespanSeconds.toString());
        }
        if (this._inactivityTimeoutSeconds !== undefined) {
            result.push("-i");
            result.push(this._inactivityTimeoutSeconds.toString());
        }
        return result;
    }
    /**
     * Starts the instance, returning the connection string once started
     */
    async start() {
        if (this._process) {
            throw new Error("Already started! Stop me first! If you want connection info, observe the connectionInfo property");
        }
        const runner = await this.findRunner(), args = this._generateTempDbRunnerArgs(), process = this._process = child_process_1.spawn(runner, args);
        return new Promise((resolve, reject) => {
            let resolved = false;
            const stderr = [];
            process.stdin.setDefaultEncoding("utf8");
            process.stdout.on("data", d => {
                const line = d.toString().replace(/\n$/, "").replace(/\r$/, "");
                if (line.toLowerCase().startsWith("connection string:")) {
                    const connectionstring = line.split(":").slice(1).join(":").trim();
                    this._connectionInfo = new connection_info_1.ConnectionInfo(connectionstring, this._type);
                    if (!resolved) {
                        resolve(this._connectionInfo);
                        resolved = true;
                    }
                }
            });
            process.stderr.on("data", d => {
                stderr.push(d.toString());
            });
            process.on("close", code => {
                var _a;
                if (code && !resolved) {
                    reject(`Unable to start up ${runner}:\n${stderr.join("\n")}`);
                }
                if (code) {
                    const error = new Error(`TempDbRunner process stops with code: ${code}`);
                    error.exitCode = code;
                    this._lastError = error;
                    if (this._stopReject) {
                        this._stopReject(error);
                    }
                }
                else if (this._stopResolve) {
                    this._stopResolve();
                }
                try {
                    (_a = this._process) === null || _a === void 0 ? void 0 : _a.kill();
                }
                catch (e) {
                }
                this._process = undefined;
                this._stopResolve = undefined;
                this._stopReject = undefined;
            });
        });
    }
    async stop() {
        return new Promise((resolve, reject) => {
            if (this._process === undefined) {
                return this._lastError
                    ? reject(this._lastError)
                    : reject(new Error(`Not running`));
            }
            if (this._stopResolve) {
                return reject(`Busy trying to stop...`);
            }
            this._stopResolve = resolve;
            this._stopReject = reject;
            this._process.stdin.write("stop\n");
        });
    }
    findRunner() {
        // find the package folder
        if (process.platform === "win32") {
            return this.findRunnerForWindows();
        }
        else {
            return this.findRunnerForNix();
        }
    }
    async findRunnerForWindows() {
        // look for lib/net4* on windows
        const tempDbBase = await this.findFrameworkPackageFolder(), tempDbContents = await fs_1.fs.readdir(tempDbBase), search = `${pbPackage}.exe`, lsearch = search.toLowerCase(), launcher = tempDbContents.find(p => p.toLowerCase() === lsearch);
        if (!launcher) {
            throw new Error(`Could not find launcher ${search} in ${tempDbBase}`);
        }
        return path_1.default.join(tempDbBase, launcher);
    }
    async findNetCorePackageFolder() {
        const winner = await this.findPackageLibFolder(f => path_1.default.basename(f).startsWith("netcore"));
        if (!winner) {
            throw new Error(`Can't find netcore libdir under ${await this.findPackageFolder()}`);
        }
        return winner;
    }
    async findFrameworkPackageFolder() {
        const winner = await this.findPackageLibFolder(f => path_1.default.basename(f).startsWith("net4"));
        if (!winner) {
            throw new Error(`Can't find ${pbPackage} net4x libdir`);
        }
        return winner;
    }
    async findPackageLibFolder(matching) {
        const packageFolder = await this.findTempDbPackageFolder(), libDir = path_1.default.join(packageFolder, "lib"), contents = await fs_1.fs.readdir(libDir), contentsFullPaths = contents.map(f => path_1.default.join(libDir, f));
        return contentsFullPaths.find(matching);
    }
    async findTempDbPackageFolder() {
        const packageFolder = await this.findPackageFolder(), immediateContents = await fs_1.fs.readdir(packageFolder), searchPackageFolder = pbPackage.toLowerCase(), tempDbPackageFolder = immediateContents.find(p => p.toLowerCase().startsWith(searchPackageFolder));
        if (tempDbPackageFolder) {
            return path_1.default.join(packageFolder, tempDbPackageFolder);
        }
        throw new Error(`Could not find ${pbPackage} package folder under "${packageFolder}"`);
    }
    async findRunnerForNix() {
        const dotnet = await which_1.which("dotnet");
        if (dotnet) {
            return this.findDotNetRunnerForNix();
        }
        const mono = await which_1.which("mono");
        if (mono) {
            return this.findMonoRunnerForNix();
        }
        throw new Error(`node-tempdb levers off of ${pbPackage} You either need 'dotnet' or 'mono' to spin it up.`);
    }
    async findDotNetRunnerForNix() {
        return this.findShellScriptLauncher(await this.findNetCorePackageFolder());
    }
    async findMonoRunnerForNix() {
        return this.findShellScriptLauncher(await this.findFrameworkPackageFolder());
    }
    async findShellScriptLauncher(folder) {
        const contents = await fs_1.fs.readdir(folder), scriptname = "start-tempdb.sh", shellscript = contents.find(s => s.toLowerCase() === scriptname);
        if (!shellscript) {
            throw new Error(`Can't find launcher stub ${scriptname} in ${folder}`);
        }
        const result = path_1.default.join(folder, shellscript);
        // ensure it's a unix file!
        const scriptContents = await fs_1.fs.readTextFile(result);
        const unixified = scriptContents.split(/[\r|\n]/)
            .filter(l => l.trim() !== "")
            .join("\n");
        await fs_1.fs.writeFile(result, unixified);
        // ensure it's executable!
        await fs_1.fs.chmod(result, "755");
        return result;
    }
    async findPackageFolder() {
        let current = __dirname, last = current;
        do {
            last = current;
            const test = path_1.default.join(current, "package.json");
            if (await fs_1.fs.fileExists(test)) {
                try {
                    const contents = await fs_1.fs.readTextFile(test), pkg = JSON.parse(contents), isMine = pkg.name === myPackage;
                    if (isMine) {
                        return current;
                    }
                }
                catch (e) {
                    // suppress: if we can't read & parse it, it might as well not exist
                }
            }
            current = path_1.default.dirname(current);
        } while (last !== current);
        throw new Error(`Can't find package base dir for "${myPackage}"`);
    }
}
exports.TempDb = TempDb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXGNvZGVcXG9wZW5zb3VyY2VcXG5vZGUtdGVtcGRiXFxzcmNcXHRlbXBkYi50cyIsInNvdXJjZXMiOlsiQzpcXGNvZGVcXG9wZW5zb3VyY2VcXG5vZGUtdGVtcGRiXFxzcmNcXHRlbXBkYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpREFBc0U7QUFDdEUsZ0RBQXdCO0FBQ3hCLDZCQUEwQjtBQUMxQixtQ0FBZ0M7QUFDaEMsdURBQXlFO0FBRXpFLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQztBQUNoQyxNQUFNLFNBQVMsR0FBRyw0QkFBNEIsQ0FBQztBQUUvQyxJQUFZLFNBSVg7QUFKRCxXQUFZLFNBQVM7SUFDakIsNEJBQWUsQ0FBQTtJQUNmLDhCQUFpQixDQUFBO0lBQ2pCLGdDQUFtQixDQUFBO0FBQ3ZCLENBQUMsRUFKVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUlwQjtBQVVELE1BQWEsTUFBTTtJQWlCZixZQUFZLE9BQXVCOztRQUMvQixJQUFJLENBQUMsS0FBSyxTQUFHLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxJQUFJLG1DQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDOUMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSx3QkFBd0IsQ0FBQztRQUNuRSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLHVCQUF1QixDQUFDO0lBQ3JFLENBQUM7SUFsQk0sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBdUI7UUFDOUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUss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OlsiaW1wb3J0IHsgQ2hpbGRQcm9jZXNzV2l0aG91dE51bGxTdHJlYW1zLCBzcGF3biB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IGZzIH0gZnJvbSBcIi4vZnNcIjtcclxuaW1wb3J0IHsgd2hpY2ggfSBmcm9tIFwiLi93aGljaFwiO1xyXG5pbXBvcnQgeyBDb25uZWN0aW9uSW5mbywgRGJDb25maWcsIEtuZXhDb25maWcgfSBmcm9tIFwiLi9jb25uZWN0aW9uLWluZm9cIjtcclxuXHJcbmNvbnN0IG15UGFja2FnZSA9IFwibm9kZS10ZW1wZGJcIjtcclxuY29uc3QgcGJQYWNrYWdlID0gXCJQZWFudXRCdXR0ZXIuVGVtcERiLlJ1bm5lclwiO1xyXG5cclxuZXhwb3J0IGVudW0gRGF0YWJhc2VzIHtcclxuICAgIG15c3FsID0gXCJteXNxbFwiLFxyXG4gICAgc3FsaXRlID0gXCJzcWxpdGVcIixcclxuICAgIGxvY2FsZGIgPSBcImxvY2FsZGJcIlxyXG59XHJcblxyXG50eXBlIEFjdGlvbiA9ICgoLi4uYXJnczogYW55W10pID0+IHZvaWQpO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUZW1wRGJPcHRpb25zIHtcclxuICAgIHR5cGU/OiBEYXRhYmFzZXMsXHJcbiAgICBpbmFjdGl2aXR5VGltZW91dFNlY29uZHM/OiBudW1iZXI7XHJcbiAgICBhYnNvbHV0ZUxpZmVzcGFuU2Vjb25kcz86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRlbXBEYiB7XHJcbiAgICBwcml2YXRlIF9sYXN0RXJyb3I6IGFueTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGNyZWF0ZShvcHRpb25zPzogVGVtcERiT3B0aW9ucyk6IFByb21pc2U8VGVtcERiPiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFRlbXBEYihvcHRpb25zKTtcclxuICAgICAgICBhd2FpdCByZXN1bHQuc3RhcnQoKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpOiBEYXRhYmFzZXMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3R5cGU6IERhdGFiYXNlcztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2luYWN0aXZpdHlUaW1lb3V0U2Vjb25kcz86IG51bWJlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Fic29sdXRlTGlmZXNwYW5TZWNvbmRzPzogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBUZW1wRGJPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5fdHlwZSA9IG9wdGlvbnM/LnR5cGUgPz8gRGF0YWJhc2VzLm15c3FsO1xyXG4gICAgICAgIHRoaXMuX2luYWN0aXZpdHlUaW1lb3V0U2Vjb25kcyA9IG9wdGlvbnM/LmluYWN0aXZpdHlUaW1lb3V0U2Vjb25kcztcclxuICAgICAgICB0aGlzLl9hYnNvbHV0ZUxpZmVzcGFuU2Vjb25kcyA9IG9wdGlvbnM/LmFic29sdXRlTGlmZXNwYW5TZWNvbmRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29uZmlnKCk6IERiQ29uZmlnIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbkluZm9cclxuICAgICAgICAgICAgPyB0aGlzLl9jb25uZWN0aW9uSW5mby5jbG9uZSgpLmNvbmZpZ1xyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGtuZXhDb25maWcoKTogS25leENvbmZpZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb25JbmZvXHJcbiAgICAgICAgICAgID8gdGhpcy5fY29ubmVjdGlvbkluZm8uY2xvbmUoKS5rbmV4Q29uZmlnXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0IGNvbm5lY3Rpb25JbmZvKCk6IENvbm5lY3Rpb25JbmZvIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX2Nvbm5lY3Rpb25JbmZvXHJcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIDogdGhpcy5fY29ubmVjdGlvbkluZm8uY2xvbmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGlzUnVubmluZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9wcm9jZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2Nvbm5lY3Rpb25JbmZvOiBDb25uZWN0aW9uSW5mbyB8IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgX3Byb2Nlc3M6IENoaWxkUHJvY2Vzc1dpdGhvdXROdWxsU3RyZWFtcyB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBwcml2YXRlIF9nZW5lcmF0ZVRlbXBEYlJ1bm5lckFyZ3MoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtcIi1lXCIsIHRoaXMuX3R5cGVdO1xyXG4gICAgICAgIGlmICh0aGlzLl9hYnNvbHV0ZUxpZmVzcGFuU2Vjb25kcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwiLWFcIik7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuX2Fic29sdXRlTGlmZXNwYW5TZWNvbmRzLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faW5hY3Rpdml0eVRpbWVvdXRTZWNvbmRzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goXCItaVwiKTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5faW5hY3Rpdml0eVRpbWVvdXRTZWNvbmRzLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSBpbnN0YW5jZSwgcmV0dXJuaW5nIHRoZSBjb25uZWN0aW9uIHN0cmluZyBvbmNlIHN0YXJ0ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIHN0YXJ0KCk6IFByb21pc2U8Q29ubmVjdGlvbkluZm8+IHtcclxuICAgICAgICBpZiAodGhpcy5fcHJvY2Vzcykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICBcIkFscmVhZHkgc3RhcnRlZCEgU3RvcCBtZSBmaXJzdCEgSWYgeW91IHdhbnQgY29ubmVjdGlvbiBpbmZvLCBvYnNlcnZlIHRoZSBjb25uZWN0aW9uSW5mbyBwcm9wZXJ0eVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgIHJ1bm5lciA9IGF3YWl0IHRoaXMuZmluZFJ1bm5lcigpLFxyXG4gICAgICAgICAgICBhcmdzID0gdGhpcy5fZ2VuZXJhdGVUZW1wRGJSdW5uZXJBcmdzKCksXHJcbiAgICAgICAgICAgIHByb2Nlc3MgPSB0aGlzLl9wcm9jZXNzID0gc3Bhd24ocnVubmVyLCBhcmdzKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Q29ubmVjdGlvbkluZm8+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlc29sdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ZGVycjogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5zdGRpbi5zZXREZWZhdWx0RW5jb2RpbmcoXCJ1dGY4XCIpO1xyXG4gICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC5vbihcImRhdGFcIiwgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gZC50b1N0cmluZygpLnJlcGxhY2UoL1xcbiQvLCBcIlwiKS5yZXBsYWNlKC9cXHIkLywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJjb25uZWN0aW9uIHN0cmluZzpcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uc3RyaW5nID0gbGluZS5zcGxpdChcIjpcIikuc2xpY2UoMSkuam9pbihcIjpcIikudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb25JbmZvID0gbmV3IENvbm5lY3Rpb25JbmZvKGNvbm5lY3Rpb25zdHJpbmcsIHRoaXMuX3R5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLl9jb25uZWN0aW9uSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwcm9jZXNzLnN0ZGVyci5vbihcImRhdGFcIiwgZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdGRlcnIucHVzaChkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5vbihcImNsb3NlXCIsIGNvZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgJiYgIXJlc29sdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGBVbmFibGUgdG8gc3RhcnQgdXAgJHsgcnVubmVyIH06XFxuJHsgc3RkZXJyLmpvaW4oXCJcXG5cIikgfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgVGVtcERiUnVubmVyIHByb2Nlc3Mgc3RvcHMgd2l0aCBjb2RlOiAkeyBjb2RlIH1gKSBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuZXhpdENvZGUgPSBjb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RFcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG9wUmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BSZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RvcFJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9wUmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzPy5raWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RvcFJlc29sdmUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdG9wUmVqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zdG9wUmVzb2x2ZTogQWN0aW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBfc3RvcFJlamVjdDogQWN0aW9uIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIHB1YmxpYyBhc3luYyBzdG9wKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcm9jZXNzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXN0RXJyb3JcclxuICAgICAgICAgICAgICAgICAgICA/IHJlamVjdCh0aGlzLl9sYXN0RXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgOiByZWplY3QobmV3IEVycm9yKGBOb3QgcnVubmluZ2ApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RvcFJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoYEJ1c3kgdHJ5aW5nIHRvIHN0b3AuLi5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9zdG9wUmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3BSZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3Muc3RkaW4ud3JpdGUoXCJzdG9wXFxuXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmluZFJ1bm5lcigpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIC8vIGZpbmQgdGhlIHBhY2thZ2UgZm9sZGVyXHJcbiAgICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09IFwid2luMzJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kUnVubmVyRm9yV2luZG93cygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmRSdW5uZXJGb3JOaXgoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBmaW5kUnVubmVyRm9yV2luZG93cygpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIC8vIGxvb2sgZm9yIGxpYi9uZXQ0KiBvbiB3aW5kb3dzXHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgdGVtcERiQmFzZSA9IGF3YWl0IHRoaXMuZmluZEZyYW1ld29ya1BhY2thZ2VGb2xkZXIoKSxcclxuICAgICAgICAgICAgdGVtcERiQ29udGVudHMgPSBhd2FpdCBmcy5yZWFkZGlyKHRlbXBEYkJhc2UpLFxyXG4gICAgICAgICAgICBzZWFyY2ggPSBgJHsgcGJQYWNrYWdlIH0uZXhlYCxcclxuICAgICAgICAgICAgbHNlYXJjaCA9IHNlYXJjaC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICBsYXVuY2hlciA9IHRlbXBEYkNvbnRlbnRzLmZpbmQocCA9PiBwLnRvTG93ZXJDYXNlKCkgPT09IGxzZWFyY2gpO1xyXG4gICAgICAgIGlmICghbGF1bmNoZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBsYXVuY2hlciAkeyBzZWFyY2ggfSBpbiAkeyB0ZW1wRGJCYXNlIH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGguam9pbih0ZW1wRGJCYXNlLCBsYXVuY2hlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBmaW5kTmV0Q29yZVBhY2thZ2VGb2xkZXIoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCB3aW5uZXIgPSBhd2FpdCB0aGlzLmZpbmRQYWNrYWdlTGliRm9sZGVyKFxyXG4gICAgICAgICAgICBmID0+IHBhdGguYmFzZW5hbWUoZikuc3RhcnRzV2l0aChcIm5ldGNvcmVcIilcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICghd2lubmVyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBuZXRjb3JlIGxpYmRpciB1bmRlciAkeyBhd2FpdCB0aGlzLmZpbmRQYWNrYWdlRm9sZGVyKCkgfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd2lubmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZmluZEZyYW1ld29ya1BhY2thZ2VGb2xkZXIoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCB3aW5uZXIgPSBhd2FpdCB0aGlzLmZpbmRQYWNrYWdlTGliRm9sZGVyKFxyXG4gICAgICAgICAgICBmID0+IHBhdGguYmFzZW5hbWUoZikuc3RhcnRzV2l0aChcIm5ldDRcIilcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmICghd2lubmVyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCAkeyBwYlBhY2thZ2UgfSBuZXQ0eCBsaWJkaXJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdpbm5lcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGZpbmRQYWNrYWdlTGliRm9sZGVyKG1hdGNoaW5nOiAoKGZ1bGxwYXRoOiBzdHJpbmcpID0+IGJvb2xlYW4pKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICBwYWNrYWdlRm9sZGVyID0gYXdhaXQgdGhpcy5maW5kVGVtcERiUGFja2FnZUZvbGRlcigpLFxyXG4gICAgICAgICAgICBsaWJEaXIgPSBwYXRoLmpvaW4ocGFja2FnZUZvbGRlciwgXCJsaWJcIiksXHJcbiAgICAgICAgICAgIGNvbnRlbnRzID0gYXdhaXQgZnMucmVhZGRpcihsaWJEaXIpLFxyXG4gICAgICAgICAgICBjb250ZW50c0Z1bGxQYXRocyA9IGNvbnRlbnRzLm1hcChmID0+IHBhdGguam9pbihsaWJEaXIsIGYpKVxyXG4gICAgICAgIHJldHVybiBjb250ZW50c0Z1bGxQYXRocy5maW5kKG1hdGNoaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGZpbmRUZW1wRGJQYWNrYWdlRm9sZGVyKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgcGFja2FnZUZvbGRlciA9IGF3YWl0IHRoaXMuZmluZFBhY2thZ2VGb2xkZXIoKSxcclxuICAgICAgICAgICAgaW1tZWRpYXRlQ29udGVudHMgPSBhd2FpdCBmcy5yZWFkZGlyKHBhY2thZ2VGb2xkZXIpLFxyXG4gICAgICAgICAgICBzZWFyY2hQYWNrYWdlRm9sZGVyID0gcGJQYWNrYWdlLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgICAgICAgIHRlbXBEYlBhY2thZ2VGb2xkZXIgPSBpbW1lZGlhdGVDb250ZW50cy5maW5kKFxyXG4gICAgICAgICAgICAgICAgcCA9PiBwLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChzZWFyY2hQYWNrYWdlRm9sZGVyKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGlmICh0ZW1wRGJQYWNrYWdlRm9sZGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLmpvaW4ocGFja2FnZUZvbGRlciwgdGVtcERiUGFja2FnZUZvbGRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgJHsgcGJQYWNrYWdlIH0gcGFja2FnZSBmb2xkZXIgdW5kZXIgXCIkeyBwYWNrYWdlRm9sZGVyIH1cImApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZmluZFJ1bm5lckZvck5peCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0IGRvdG5ldCA9IGF3YWl0IHdoaWNoKFwiZG90bmV0XCIpO1xyXG4gICAgICAgIGlmIChkb3RuZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZERvdE5ldFJ1bm5lckZvck5peCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb25vID0gYXdhaXQgd2hpY2goXCJtb25vXCIpO1xyXG4gICAgICAgIGlmIChtb25vKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmRNb25vUnVubmVyRm9yTml4KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbm9kZS10ZW1wZGIgbGV2ZXJzIG9mZiBvZiAkeyBwYlBhY2thZ2UgfSBZb3UgZWl0aGVyIG5lZWQgJ2RvdG5ldCcgb3IgJ21vbm8nIHRvIHNwaW4gaXQgdXAuYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBmaW5kRG90TmV0UnVubmVyRm9yTml4KCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZFNoZWxsU2NyaXB0TGF1bmNoZXIoXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmluZE5ldENvcmVQYWNrYWdlRm9sZGVyKClcclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBmaW5kTW9ub1J1bm5lckZvck5peCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRTaGVsbFNjcmlwdExhdW5jaGVyKFxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZpbmRGcmFtZXdvcmtQYWNrYWdlRm9sZGVyKClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZmluZFNoZWxsU2NyaXB0TGF1bmNoZXIoZm9sZGVyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgIGNvbnRlbnRzID0gYXdhaXQgZnMucmVhZGRpcihmb2xkZXIpLFxyXG4gICAgICAgICAgICBzY3JpcHRuYW1lID0gXCJzdGFydC10ZW1wZGIuc2hcIixcclxuICAgICAgICAgICAgc2hlbGxzY3JpcHQgPSBjb250ZW50cy5maW5kKHMgPT4gcy50b0xvd2VyQ2FzZSgpID09PSBzY3JpcHRuYW1lKTtcclxuICAgICAgICBpZiAoIXNoZWxsc2NyaXB0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBsYXVuY2hlciBzdHViICR7IHNjcmlwdG5hbWUgfSBpbiAkeyBmb2xkZXIgfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBwYXRoLmpvaW4oZm9sZGVyLCBzaGVsbHNjcmlwdCk7XHJcbiAgICAgICAgLy8gZW5zdXJlIGl0J3MgYSB1bml4IGZpbGUhXHJcbiAgICAgICAgY29uc3Qgc2NyaXB0Q29udGVudHMgPSBhd2FpdCBmcy5yZWFkVGV4dEZpbGUocmVzdWx0KTtcclxuICAgICAgICBjb25zdCB1bml4aWZpZWQgPSBzY3JpcHRDb250ZW50cy5zcGxpdCgvW1xccnxcXG5dLylcclxuICAgICAgICAgICAgLmZpbHRlcihsID0+IGwudHJpbSgpICE9PSBcIlwiKVxyXG4gICAgICAgICAgICAuam9pbihcIlxcblwiKTtcclxuICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUocmVzdWx0LCB1bml4aWZpZWQpO1xyXG4gICAgICAgIC8vIGVuc3VyZSBpdCdzIGV4ZWN1dGFibGUhXHJcbiAgICAgICAgYXdhaXQgZnMuY2htb2QocmVzdWx0LCBcIjc1NVwiKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZmluZFBhY2thZ2VGb2xkZXIoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBsZXRcclxuICAgICAgICAgICAgY3VycmVudCA9IF9fZGlybmFtZSxcclxuICAgICAgICAgICAgbGFzdCA9IGN1cnJlbnQ7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBsYXN0ID0gY3VycmVudDtcclxuICAgICAgICAgICAgY29uc3QgdGVzdCA9IHBhdGguam9pbihjdXJyZW50LCBcInBhY2thZ2UuanNvblwiKTtcclxuICAgICAgICAgICAgaWYgKGF3YWl0IGZzLmZpbGVFeGlzdHModGVzdCkpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSBhd2FpdCBmcy5yZWFkVGV4dEZpbGUodGVzdCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBrZyA9IEpTT04ucGFyc2UoY29udGVudHMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01pbmUgPSBwa2cubmFtZSA9PT0gbXlQYWNrYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01pbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN1cHByZXNzOiBpZiB3ZSBjYW4ndCByZWFkICYgcGFyc2UgaXQsIGl0IG1pZ2h0IGFzIHdlbGwgbm90IGV4aXN0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudCA9IHBhdGguZGlybmFtZShjdXJyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGxhc3QgIT09IGN1cnJlbnQpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBwYWNrYWdlIGJhc2UgZGlyIGZvciBcIiR7IG15UGFja2FnZSB9XCJgKTtcclxuICAgIH1cclxufVxyXG4iXX0=