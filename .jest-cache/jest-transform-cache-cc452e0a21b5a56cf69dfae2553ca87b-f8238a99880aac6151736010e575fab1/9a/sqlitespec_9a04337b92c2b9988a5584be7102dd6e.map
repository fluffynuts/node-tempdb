{"version":3,"file":"C:\\code\\opensource\\node-tempdb\\tests\\sqlite.spec.ts","sources":["C:\\code\\opensource\\node-tempdb\\tests\\sqlite.spec.ts"],"names":[],"mappings":";;;;;AAAA,iCAA+B;AAC/B,0CAAkD;AAClD,gDAAwB;AAGxB,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAC9D,UAAU;QACV,MAAM,QAAQ,GAAG,MAAM,CAAC,kBAAS,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM;QACN,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC9C,SAAS;QACT,MAAM,IAAI,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;aACnC,IAAI,CAAC,eAAe,CAAC;aACrB,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC;aACT,cAAc,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QACzB,UAAU;QACV,MAAM,QAAQ,GAAG,MAAM,CAAC,kBAAS,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM;QACN,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC9C,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,SAAS;QACT,MAAM,UAAU,GAAG,cAAc,CAAC,MAAgC,CAAC;QACnE,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;aACtB,GAAG,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;QAC7E,UAAU;QACV,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,kBAAS,CAAC,MAAM,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SACjE;QACD,MAAM;QACN,SAAS;QACT,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;aACnC,IAAI,CAAC,eAAe,CAAC;aACrB,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC;aACT,cAAc,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,MAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,SAAS,MAAM,CAAC,IAAgB;QAC5B,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QACpC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,UAAU,YAAY,CAAC,IAAgB;QACxC,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7C,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,IAAI,WAAW,GAAU,EAAE,CAAC;IAC5B,SAAS,WAAW,CAAC,MAAkB;QACnC,MAAM,MAAM,GAAG,cAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,UAAU,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAGH,SAAS,CAAC,KAAK,IAAI,EAAE;QACjB,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QACrD,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;YACzB,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACpB,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;aACzB;SACJ;QACD,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QACxD,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YACpB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;SACxB;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import \"expect-even-more-jest\";\r\nimport { Databases, TempDb } from \"../src/tempdb\";\r\nimport Knex from \"knex\";\r\nimport { KnexConfig, SqliteConnectionConfig } from \"../src/connection-info\";\r\n\r\ndescribe(`node-tempdb: sqlite support`, () => {\r\n    it(`should provide a temp sqlite database on request`, async () => {\r\n        // Arrange\r\n        const instance = create(Databases.sqlite);\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        // Assert\r\n        const conn = knexConnect(connectionInfo.knexConfig);\r\n        const result = await conn.select(\"name\")\r\n            .from(\"sqlite_master\")\r\n            .where(\"type\", \"=\", \"table\");\r\n        expect(result)\r\n            .toBeEmptyArray();\r\n    });\r\n\r\n    it(`should stop`, async () => {\r\n        // Arrange\r\n        const instance = create(Databases.sqlite);\r\n        // Act\r\n        const connectionInfo = await instance.start();\r\n        await instance.stop();\r\n        // Assert\r\n        const connection = connectionInfo.config as SqliteConnectionConfig;\r\n        expect(connection.filename)\r\n            .not.toBeFile();\r\n    });\r\n\r\n    it(`should have a static create method which starts up the database`, async () => {\r\n        // Arrange\r\n        const instance = await staticCreate(Databases.sqlite);\r\n        const config = instance.knexConfig;\r\n        if (!config) {\r\n            throw new Error(\"Started TempDb instance should have config\");\r\n        }\r\n        // Act\r\n        // Assert\r\n        const conn = knexConnect(config);\r\n        const result = await conn.select(\"name\")\r\n            .from(\"sqlite_master\")\r\n            .where(\"type\", \"=\", \"table\");\r\n        expect(result)\r\n            .toBeEmptyArray();\r\n    });\r\n\r\n    const instances: TempDb[] = [];\r\n\r\n    function create(type?: Databases) {\r\n        const result = new TempDb({ type });\r\n        instances.push(result);\r\n        return result;\r\n    }\r\n\r\n    async function staticCreate(type?: Databases) {\r\n        const result = await TempDb.create({ type });\r\n        instances.push(result);\r\n        return result;\r\n    }\r\n\r\n    let connections: any[] = [];\r\n    function knexConnect(config: KnexConfig) {\r\n        const result = Knex(config);\r\n        connections.push(result);\r\n        return result;\r\n    }\r\n\r\n    beforeEach(() => {\r\n        jest.setTimeout(30000);\r\n    });\r\n\r\n\r\n    afterEach(async () => {\r\n        const toStop = instances.splice(0, instances.length);\r\n        for (let instance of toStop) {\r\n            if (instance.isRunning) {\r\n                await instance.stop();\r\n            }\r\n        }\r\n        const conns = connections.splice(0, connections.length);\r\n        for (let conn of conns) {\r\n            await conn.destroy();\r\n        }\r\n    });\r\n});\r\n"]}